// Firebase SDK ‡§á‡§Ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
import { db, auth } from "./firebase-config.js";
import { doc, getDoc, setDoc, updateDoc, collection, addDoc } from "https://www.gstatic.com/firebasejs/10.9.0/firebase-firestore.js";

// üí∞ ‡§µ‡•â‡§≤‡•á‡§ü ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
async function getWalletBalance(userId) {
    const userRef = doc(db, "wallets", userId);
    const userSnap = await getDoc(userRef);

    if (userSnap.exists()) {
        return userSnap.data().balance;
    } else {
        await setDoc(userRef, { balance: 100 });
        return 100;
    }
}

// üíµ ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
async function updateWalletBalance(userId, amount) {
    const userRef = doc(db, "wallets", userId);
    await updateDoc(userRef, { balance: amount });
}

// üé≤ ‡§¨‡•á‡§ü ‡§≤‡§ó‡§æ‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® (‡§°‡•á‡§ü‡§æ Firestore ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§π‡•ã‡§ó‡§æ)
async function placeBet(amount, betType) {
    const user = auth.currentUser;
    if (!user) {
        alert("Please log in first!");
        return;
    }

    const balance = await getWalletBalance(user.uid);
    if (balance < amount) {
        alert("Insufficient balance!");
        return;
    }

    // üî• ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    await updateWalletBalance(user.uid, balance - amount);

    // üî• Firestore ‡§Æ‡•á‡§Ç ‡§¨‡•á‡§ü‡§ø‡§Ç‡§ó ‡§°‡§æ‡§ü‡§æ ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡•á‡§Ç
    await addDoc(collection(db, "bets"), {
        userId: user.uid,
        amount: amount,
        betType: betType,
        timestamp: new Date()
    });

    document.getElementById("walletBalance").innerText = `‚Çπ${balance - amount}`;
    alert("Bet placed successfully!");
}

// üèÜ ‡§™‡§ø‡§õ‡§≤‡•á ‡§∏‡§≠‡•Ä ‡§¨‡•á‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
async function loadUserBets(userId) {
    const betsRef = collection(db, "bets");
    const betsSnap = await getDocs(betsRef);
    
    let betsHTML = "";
    betsSnap.forEach(doc => {
        if (doc.data().userId === userId) {
            betsHTML += `<p>Amount: ‚Çπ${doc.data().amount} | Type: ${doc.data().betType}</p>`;
        }
    });

    document.getElementById("betHistory").innerHTML = betsHTML;
}

export { getWalletBalance, updateWalletBalance, placeBet, loadUserBets };
